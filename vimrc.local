" [rails.vim] projections - typing `:Efactory users` will open the users factory
let g:rails_projections = {
      \ "spec/factories/*.rb": {
      \   "command":   "factory",
      \   "affinity":  "collection",
      \   "alternate": "app/models/%i.rb",
      \   "related":   "spec/models/%i_spec.rb",
      \ },
      \ "spec/models/*_spec.rb": {
      \   "related":   "spec/factories/%p.rb",
      \   "alternate": "app/models/%i.rb"
      \ },
      \ "app/*.rb": {
      \   "alternate": "spec/%i_spec.rb",
      \   "related": "spec/%i_spec.rb",
      \   "test": "spec/%i_spec.rb"
      \ },
      \ "spec/*_spec.rb": {
      \   "alternate": "app/%i.rb",
      \   "type": "test"
      \ }
      \}

" Tagbar
map <Leader>b :TagbarToggle<CR>

" Theme
" Or if you have Neovim >= 0.1.5
if (has("termguicolors"))
 set termguicolors
endif

" Neovim autocomplete
let g:deoplete#enable_at_startup = 1

" syntax on
colorscheme OceanicNext

" NeoMake
let g:neomake_ruby_enabled_makers = ['mri', 'rubocop']
" let g:neomake_ruby_rubocop_exe = '/Users/luand/.rvm/gems/ruby-2.3.3/bin/rubocop'

let g:neomake_javascript_enabled_makers = ['eslint', 'flow']
let g:neomake_javascript_eslint_exe = system('PATH=$(npm bin):$PATH && which eslint | tr -d "\n"')
let g:neomake_javascript_flow_exe = system('PATH=$(npm bin):$PATH && which flow | tr -d "\n"')

autocmd BufWritePost * Neomake " check when save
let g:neomake_open_list = 0 " Not show errors windows
let g:neomake_logfile='/tmp/neomake_error.log'
let g:neomake_place_signs=1

let g:neomake_error_sign = {'text': 'E', 'texthl': 'NeomakeErrorSign'}
let g:neomake_info_sign = {'text': 'I', 'texthl': 'NeomakeInfoSign'}
let g:neomake_warning_sign = {
         \   'text': 'W',
         \   'texthl': 'NeomakeWarningSign',
         \ }
let g:neomake_message_sign = {
    \   'text': 'M',
    \   'texthl': 'NeomakeMessageSign',
    \ }

let g:move_map_keys = 0
vmap <C-j> <Plug>MoveBlockDown
vmap <C-k> <Plug>MoveBlockUp

" Testing configure
" let test#strategy = {
"   \ 'nearest': 'neovim',
"   \ 'file':    'dispatch',
"   \ 'suite':   'basic',
"   \}

let g:rspec_runner = "os_x_iterm2"


set clipboard=unnamed
set ic " casemapcheck.:- insensitive search

" Format JS
let g:jsx_ext_required = 0
let g:jsx_pragma_required = 0

" Common
map <Leader>tf :NERDTreeFind<CR>
vmap p "_dp
map <C-c> "*y<CR>
nmap <Leader>cf :let @*=expand("%")<CR>
map <C-a> <ESC>gg<S-v>G<ESC>
nnoremap <Leader>ag :Ag!<Space>
if exists('g:ag_highlight')
  let @/ = matchstr(a:args, "\\v(-)\@<!(\<)\@<=\\w+|['\"]\\zs.{-}\\ze['\"]")
  call feedkeys(":let &hlsearch=1 \| echo \<CR>", 'n')
endif
map <Leader>bvi :PlugInstall<CR>
map <Leader>ct :Start! ctags -R "."<CR>
map <Leader>fs :FixWhitespace<CR>
map <Leader>n <C-w>v<C-h><SPACE><SPACE>
map <Leader>nt :NERDTree<CR>
map <Leader>q :q<CR>
map <Leader>rm :Remove!<CR>
map <Leader>sg :sp<CR>:grep<SPACE>
map <Leader>sv :source ~/.vimrc<CR>
map <Leader>te :tabe<SPACE>
map <Leader>v "*p<CR>
map <Leader>h :browse old<CR>
map <Leader>vi :tabe ~/.vimrc.local<CR>
map <Leader>vb :tabe ~/.vimrc.bundles.local<CR>
map <Leader>w :w<CR>
nmap <CR> o<Esc>k
nnoremap <S-CR> O<Esc>j
map <Leader>k :Ag! <cword><CR>
map <Leader>cv :REview <C-r><C-w>.html.haml
map <Leader>e /\<
map <Leader>cs :!git status --porcelain \| cut -c4- \| grep '.rb' \| xargs rubocop<CR>
map <Leader>ut :UndotreeToggle<CR>
map <Leader>rr :!ruby %<CR>
vmap u .
vmap U .
" nnoremap <C-]> :CtrlPtjump<cr>
" vnoremap <C-]> :CtrlPtjumpVisual<cr>

" Search
nmap fs :Ag! "<cword>" -G "\.(css\|scss)" --ignore "*.min.css" --ignore-dir "app/assets/stylesheets/components" --ignore-dir "app/assets/webpack"<CR>
nmap fj :Ag! "<cword>" -G "\.js" --ignore "*.min.js" --ignore-dir "app/assets/javascripts/components" --ignore-dir "app/assets/webpack"<CR>
nmap fr :Ag! "<cword>" -G "\.rb"<CR>
nmap fv :Ag! "<cword>" -G "\.(haml\|erb)"<CR>
nmap fm :Ag! "<cword>" -G "\.rb" -r "app/models"<CR>
nmap fc :Ag! "<cword>" -G "\.rb" -r "app/controllers"<CR>
nmap fa :Ag! "<cword>" -G "\.(rb\|erb\|js\|css\|scss\|yml\|rake\|haml)" --ignore "*.min.*" --ignore-dir "app/assets/javascripts/components" --ignore-dir "app/assets/stylesheets/components" --ignore-dir "app/assets/webpack"<CR>

" Git
map <Leader>co :Gread<CR>
map <Leader>ga :Gwrite<CR>
map <Leader>gac :Gcommit -am ""<LEFT>
map <Leader>gb :Gblame<CR>
map <Leader>gc :Gcommit -m ""<LEFT>
map <Leader>gd :Gvdiff<CR>
map <Leader>gm :Gmove<SPACE>
map <Leader>gr :Gremove<CR>
map <Leader>gs :Gstatus<CR>
map <Leader>go :Gbrowse<CR>

" vim-gitgutter
set updatetime=100

" React
" Trigger configuration (Optional)
let g:UltiSnipsExpandTrigger="<C-l>"
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.js" "closetag

" Rails
map <Leader>a <ESC>ggVG<CR>
map <Leader>ac :Scontroller application<CR>
map <Leader>ah :Vhelper application<CR>
map <Leader>aj <ESC>:e app/assets/javascripts/application.js<CR>
map <Leader>as <ESC>:e app/assets/stylesheets/application.scss<CR>
map <Leader>av :AV<CR>
map <Leader>bi :!bundle install<CR>
map <Leader>md :!rake db:migrate<CR>
map <Leader>c :Scontroller<SPACE>
map <Leader>d <ESC>obyebug<ESC>
map <Leader>dv <ESC>o- byebug<ESC>
map <Leader>db :e config/database.yml<CR>
map <Leader>g :e Gemfile<CR>
map <Leader>m :Smodel<SPACE>
map <Leader>rt :e config/routes.rb<CR>
map <Leader>art :e config/routes/admin.rb<CR>
map <Leader>rv :RV<CR>
map <Leader>sc :sp db/schema.rb<CR>
map <Leader>vc :Vcontroller<SPACE>
map <Leader>va :e app/api/employment_hero/v2
map <Leader>vf :e app/forms/
map <Leader>vr :e app/react/beta/components/
map <Leader>vm :Vmodel<SPACE>
map <Leader>vv :Vview<SPACE>
map <Leader>bc :Scontroller<SPACE>
map <Leader>bm :Smodel<SPACE>
map <Leader>bv :Sview<SPACE>
map <Leader>sf :Sfactory <C-R><C-W><CR>
map <Leader>vp :e app/policies/
xmap ga <Plug>(EasyAlign)
map <Leader>rf :e config/routes/
map <Leader>cp :Rextract<SPACE>
map <Leader>fm :%s/\t/  /g<CR>
vmap <Leader>f :MultipleCursorsFind<SPACE>

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1
highlight ExtraWhitespace ctermbg=white
autocmd BufWritePre * StripWhitespace
map <Leader> fp :GitGrepCurrentPartial<CR>

" git gutter
let g:gitgutter_map_keys = 0

" Livedown
" should markdown preview get shown automatically upon opening markdown buffer
let g:livedown_autorun = 0

" should the browser window pop-up upon previewing
let g:livedown_open = 1

" the port on which Livedown server will run
let g:livedown_port = 1337

" the browser to use
let g:livedown_browser = "safari"

map <Leader>lp :LivedownToggle<CR>

" Find
" let g:ctrlp_tjump_shortener = ['/.*/gems/', '.../', '/.js', '/.jsx']
" let g:ctrlp_tjump_only_silent = 1
" let g:ctrlp_tjump_skip_tag_name = 1

set clipboard=unnamed
filetype plugin indent on
" when indenting with '>', use 4 spaces width
set shiftwidth=2
" On pressing tab, insert 4 spaces
set expandtab

" Get path of current file
nmap <Leader>gp :let @+ = expand("%:p")<CR>

" Jest to test javascript
map <Leader>tj :!yarn jest %:p<CR>

nnoremap x "_x
vnoremap x "_x

" set question mark in a word
set iskeyword+=?
set iskeyword+=!
set number relativenumber

" Easy Motion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" Clear highlight search results
map <Leader>cl :noh<CR>

" Rspec Testing
map <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
map <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
map <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
map <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
map <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g

let test#strategy = "vimux"
let g:test#preserve_screen = 1

" FZF settings
map <C-p> :FZF<CR>
